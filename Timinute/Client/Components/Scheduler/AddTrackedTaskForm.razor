@using Timinute.Client.Helpers
@using Timinute.Client.Models
@using Timinute.Shared.Dtos.Project

@inject DialogService DialogService
@inject IHttpClientFactory ClientFactory
@inject NotificationService NotificationService

<RadzenTemplateForm TItem="TrackedTask" Data="@model" Submit=@OnSubmit>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Name" />
        </div>
        <div class="col">
            <RadzenTextBox @bind-Value="@model.Name" Name="Name" />
            <RadzenRequiredValidator Text="Name is required" Component="Name" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Start" />
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.StartDate" Name="Start" ShowTime="true"  DateFormat="dd.MM yyyy HH:mm:ss" HourFormat="HH:mm:ss" ShowSeconds="true" ShowTimeOkButton="true" TimeOnly="true" MinutesStep="5" SecondsStep="10" />
            <RadzenRequiredValidator Text="Start Date is required" Component="Start" />
            <RadzenCompareValidator Component="Start" Text="Start date should be less end date" Operator="CompareOperator.LessThan" Value="@model.EndDate" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="End" />
        </div>
        <div class="col">
            <RadzenDatePicker Name="End" @bind-Value="@model.EndDate" DateFormat="dd.MM yyyy HH:mm:ss" HourFormat="HH:mm:ss" ShowTime="true" ShowSeconds="true" ShowTimeOkButton="true" TimeOnly="true" MinutesStep="5" SecondsStep="10"  />
            <RadzenRequiredValidator Text="End Date is required" Component="End" />
            <RadzenCompareValidator Component="End" Text="End date should be greater start date" Operator="CompareOperator.GreaterThan" Value="@model.StartDate" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Project" />
        </div>
        <div class="col">
            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@projects @bind-Value=@model.ProjectId
                            TextProperty="Name" ValueProperty="ProjectId" Class="w-100" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </div>
    </div>
</RadzenTemplateForm>

@code {
    [Parameter]
    public DateTime Start { get; set; }

    [Parameter]
    public DateTime End { get; set; }

    TrackedTask model = new TrackedTask();

    private readonly List<Project> projects = new();



    protected override void OnParametersSet()
    {
        model.StartDate = Start;
        model.EndDate = End;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    void OnSubmit(TrackedTask model)
    {
        DialogService.Close(model);
    }

    private async Task LoadProjects()
    {
        var client = ClientFactory.CreateClient(Constants.API.ClientName);

        try
        {
            var responseMessage = await client.GetFromJsonAsync<List<ProjectDto>>(Constants.API.Project.Get);

            if (responseMessage != null)
            {
                projects.Clear();
                foreach (var projectDto in responseMessage)
                {
                    projects.Add(new Project(projectDto));
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Something happened", ex.Message, 5000);
        }
    }

}